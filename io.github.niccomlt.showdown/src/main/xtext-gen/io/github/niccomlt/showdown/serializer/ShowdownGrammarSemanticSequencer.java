/*
 * generated by Xtext 2.21.0
 */
package io.github.niccomlt.showdown.serializer;

import com.google.inject.Inject;
import io.github.niccomlt.showdown.services.ShowdownGrammarGrammarAccess;
import io.github.niccomlt.showdown.showdownGrammar.Pokemon;
import io.github.niccomlt.showdown.showdownGrammar.ShowdownGrammarPackage;
import io.github.niccomlt.showdown.showdownGrammar.Stat;
import io.github.niccomlt.showdown.showdownGrammar.Team;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ShowdownGrammarSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ShowdownGrammarGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ShowdownGrammarPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ShowdownGrammarPackage.POKEMON:
				sequence_Pokemon(context, (Pokemon) semanticObject); 
				return; 
			case ShowdownGrammarPackage.STAT:
				sequence_Stat(context, (Stat) semanticObject); 
				return; 
			case ShowdownGrammarPackage.TEAM:
				sequence_Team(context, (Team) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Pokemon returns Pokemon
	 *
	 * Constraint:
	 *     (
	 *         ((nick=Nickname specie=Specie) | specie=Specie) 
	 *         item=ID 
	 *         ability=Ability 
	 *         level=INT? 
	 *         shiny=Shiny? 
	 *         happiness=INT? 
	 *         evs+=Stat* 
	 *         nature=ID? 
	 *         ivs+=Stat* 
	 *         moves+=Move+
	 *     )
	 */
	protected void sequence_Pokemon(ISerializationContext context, Pokemon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stat returns Stat
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Stat(ISerializationContext context, Stat semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ShowdownGrammarPackage.Literals.STAT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ShowdownGrammarPackage.Literals.STAT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatAccess().getValueINTTerminalRuleCall_0_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Team returns Team
	 *
	 * Constraint:
	 *     elements+=Pokemon+
	 */
	protected void sequence_Team(ISerializationContext context, Team semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
